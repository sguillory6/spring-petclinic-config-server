plugins {
    id 'jacoco'
    id 'java'
    id 'maven-publish'
    id 'com.palantir.docker' version '0.20.1'
    id 'org.springframework.boot' version "2.0.5.RELEASE"
    id 'io.spring.dependency-management' version "1.0.6.RELEASE"
    id 'com.gradle.build-scan' version '2.0.2'
    id 'org.sonarqube' version '2.6.2'
}

version = buildVersion
description = "Spring Petclinic Config Server"

sourceCompatibility = 1.11
targetCompatibility = 1.11

jar {
    enabled = true
}

bootJar {
    classifier = 'boot'
    mainClassName = 'org.springframework.samples.petclinic.config.ConfigServerApplication'
}

buildScan {
    // always accept the terms of service
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    // always publish a build scan
    publishAlways()
}

ext.setExtProperty = { propertyName, defaultValue ->
    if (!project.hasProperty(propertyName)) {
        ext[propertyName] = defaultValue
    }
}

ext {
    setExtProperty("scsStartersVersion","1.3.1.RELEASE")
    springCloudVersion = 'Finchley.SR2'
    springBootVersion = '2.0.5.RELEASE'
}

buildScan {
    // always accept the terms of service
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    // always publish a build scan
    publishAlways()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

repositories {
    jcenter()
    mavenCentral()
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacoco {
     toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}


sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000/"
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-config-server'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}


sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000/"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.springframework.samples'
            artifactId 'spring-petclinic'
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username 'admin'
                password 'admin123'
            }
            url "http://localhost:8081/nexus/content/repositories/stang-releases"
            if (project.version.endsWith('-SNAPSHOT')) {
                url "http://localhost:8085/nexus/content/repositories/stang-snapshots"
            } else {
                url "http://localhost:8085/nexus/content/repositories/stang-releases"
            }
        }
    }
}

docker {
    dependsOn bootJar

    name "spring-petclinic-config-server:${version}"
//    tags "1.0.0"

    //located in the build context which is a folder in build/docker
    dockerfile file("docker/Dockerfile")

    //directly reference the Jar file in the Dockerfile
    def artifact = "${archivesBaseName}-${buildVersion}-boot.jar"

    // copies artifact + Dockerfile to the build context
    files "$libsDir/$artifact"

    //passing in the jar file location via --build-arg key=value
    buildArgs([BUILD_VERSION: 'version', JAR_FILE: artifact])
}
